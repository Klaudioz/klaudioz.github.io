<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Top 50 new lightweight kubernetes tools</title>
      <link href="/2020/09/21/Top-50-new-kubernetes-tools/"/>
      <url>/2020/09/21/Top-50-new-kubernetes-tools/</url>
      
        <content type="html"><![CDATA[<p>In this post I filtered out a big collection about new useful tools to work with Kubernetes. I used the following criteria to select them:</p><ul><li>Open source projects hosted in Github.</li><li>More than 50 stars but less than 10000 to exclude very popular tools like: <a href="https://github.com/helm/helm">helm</a>, <a href="https://github.com/kubernetes-sigs/kustomize">kustomize</a>, <a href="https://github.com/grafana/loki">loki</a>, <a href="https://github.com/lensapp/lens">lens</a>, <a href="https://github.com/kubernetes-sigs/kind">kind</a>, etc.</li><li>Last commit not old than 3 months.</li></ul><p>The motivation to create this list was feeling overwhelmed with the amount of new Kubernetes tools you can see every day so making a sorted list managing this knowledge can be done easily.<br>So, this is the final list without any particular sorting except the name of the categories:</p><h2 id="Alerting"><a href="#Alerting" class="headerlink" title="Alerting"></a>Alerting</h2><ul><li><a href="https://github.com/flant/k8s-image-availability-exporter">k8s-image-availability-exporter</a>: Alert if an image used in Kubernetes cannot be pulled from container registry.</li></ul><h2 id="Backup"><a href="#Backup" class="headerlink" title="Backup"></a>Backup</h2><ul><li><a href="https://github.com/miracle2k/k8s-snapshots">k8s-snapshots</a>: Automatic Volume Snapshots on Kubernetes.</li><li><a href="https://github.com/stashed/stash">stash</a>: Backup Kubernetes Stateful Applications.</li></ul><h2 id="Best-practices"><a href="#Best-practices" class="headerlink" title="Best practices"></a>Best practices</h2><ul><li><a href="https://github.com/FairwindsOps/polaris">polaris</a>: Validation of best practices in your Kubernetes clusters.</li></ul><h2 id="Chaos-engineering"><a href="#Chaos-engineering" class="headerlink" title="Chaos engineering"></a>Chaos engineering</h2><ul><li><a href="https://github.com/litmuschaos/litmus">litmus</a>: It helps Kubernetes SREs and developers practice chaos engineering in a Kubernetes native way.</li></ul><h2 id="CLI-tools"><a href="#CLI-tools" class="headerlink" title="CLI tools"></a>CLI tools</h2><ul><li><a href="https://github.com/ahmetb/kubectx">kubectx</a>: Faster way to switch between clusters and namespaces in kubectl</li><li><a href="https://github.com/jonmosco/kube-ps1">kube-ps1</a>: Kubernetes prompt info for bash and zsh</li><li><a href="https://github.com/andreazorzetto/yh">yh</a>: YAML syntax highlighter to bring colours where only jq could.</li><li><a href="https://github.com/helm/chart-testing">chart-testing</a>: CLI tool for linting and testing Helm charts.</li><li><a href="https://github.com/FairwindsOps/pluto">pluto</a>: A cli tool to help discover deprecated apiVersions in Kubernetes.</li><li><a href="https://github.com/cyberark/kubeletctl">kubeletctl</a>: It’s a CLI tool that implement kubelet’s API.</li><li><a href="https://github.com/narendranathreddythota/podtnl">podtnl</a>: CLI tool that makes your pod available online without exposing a Kubernetes service.</li><li><a href="https://github.com/sbstp/kubie">kubie</a>: A more powerful alternative to kubectx and kubens.</li><li><a href="https://github.com/d-kuro/kubectl-fuzzy">kubectl-fuzzy</a>: This tool uses fzf(1)-like fuzzy-finder to do partial or fuzzy search of Kubernetes Resources.</li></ul><h2 id="Cluster-management"><a href="#Cluster-management" class="headerlink" title="Cluster management"></a>Cluster management</h2><ul><li><a href="https://github.com/futurewei-cloud/arktos">arktos</a>: It’s an open source cluster management system designed for large scale clouds addressing key challenges of large scale clouds, including system scalability, resource efficiency, multitenancy, etc.</li><li><a href="https://github.com/kubecost/cluster-turndown">cluster-turndown</a>: Automated turndown of Kubernetes clusters on specific schedules.</li><li><a href="https://github.com/kubermatic/kubermatic">kubermatic</a>: Kubermatic Kubernetes Platform - the Central Kubernetes Management Platform for any infrastructure.</li><li><a href="https://github.com/kubermatic/kubecarrier">KubeCarrier</a>: It’s a system for managing applications and services across multiple Kubernetes Clusters; providing a framework to centralize the management of services and provide these services with external users in a self service catalog.</li><li><a href="https://github.com/weaveworks/wksctl">wksctl</a>: Allows simple creation of a Kubernetes cluster given a set of IP addresses and an SSH key. It can be run in a standalone environment but is best used via a GitOps approach in which cluster and machine descriptions are stored in Git.</li></ul><h2 id="Container-registry"><a href="#Container-registry" class="headerlink" title="Container registry"></a>Container registry</h2><ul><li><a href="https://github.com/plexsystems/sinker">sinker</a>: A tool to sync images from one container registry to another.</li></ul><h2 id="Costs"><a href="#Costs" class="headerlink" title="Costs"></a>Costs</h2><ul><li><a href="https://github.com/kubecost/cost-model">cost-model</a>: Cross-cloud cost allocation models for workloads running on Kubernetes.</li></ul><h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><ul><li><a href="https://github.com/practo/k8s-worker-pod-autoscaler">k8s-worker-pod-autoscaler</a>: It scales the replicas in a deployment based on observed queue length.</li><li><a href="https://github.com/dpeckett/pangolin">pangolin</a>: It’s an enhanced Horizontal Pod Autoscaler for Kubernetes. Pangolin scales deployments based on their Prometheus metrics, using a variety of highly configurable control strategies.</li><li><a href="https://github.com/Clivern/Beetle">beetle</a>: Kubernetes multi-cluster deployment automation service.</li></ul><h2 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h2><ul><li><a href="https://github.com/norwoodj/helm-docs">helm-docs</a>: A tool for automatically generating markdown documentation for helm charts.</li><li><a href="https://github.com/kubepack/chart-doc-gen">chart-doc-gen</a>: Helm Chart documentation generator.</li></ul><h2 id="GitOps"><a href="#GitOps" class="headerlink" title="GitOps"></a>GitOps</h2><ul><li><a href="https://github.com/fluxcd/flux">flux</a>: The GitOps Kubernetes operator.</li></ul><h2 id="Kubernetes-as-a-service"><a href="#Kubernetes-as-a-service" class="headerlink" title="Kubernetes as a service"></a>Kubernetes as a service</h2><ul><li><a href="https://github.com/oneinfra/oneinfra">oneinfra</a>: Tool designed to orchestrate fleet of Kubernetes clusters. You can control cloud as well as on-prem clusters.</li></ul><h2 id="Kubernetes-API"><a href="#Kubernetes-API" class="headerlink" title="Kubernetes API"></a>Kubernetes API</h2><ul><li><a href="https://github.com/swade1987/deprek8ion">Deprek8ion</a>: Rego policies to monitor Kubernetes APIs deprecations.</li></ul><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><ul><li><a href="https://github.com/vmware/kube-fluentd-operator">kube-fluentd-operator</a>: Auto-configuration of Fluentd daemon-set based on Kubernetes metadata.</li></ul><h2 id="Monitoring"><a href="#Monitoring" class="headerlink" title="Monitoring"></a>Monitoring</h2><ul><li><a href="https://github.com/infracloudio/botkube">botkube</a>: It helps you monitor your Kubernetes cluster, debug critical deployments &amp; gives recommendations for standard practices.</li><li><a href="https://github.com/prometheus-operator/kube-prometheus">kube-prometheus</a>: Use Prometheus to monitor Kubernetes and applications running on Kubernetes</li></ul><h2 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2><ul><li><a href="https://github.com/omrikiei/ktunnel">ktunnel</a>: A cli that exposes your local resources to kubernetes. It’s convenient replacement for ngrok.</li><li><a href="https://github.com/soluble-ai/kubetap">kubetap</a>: Kubectl plugin to interactively proxy Kubernetes Services with ease.</li></ul><h2 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h2><ul><li><a href="https://github.com/clastix/capsule">capsule</a>: It’s a Kubernetes multi-tenant Operator. It can workaround the flat structure of namespaces in Kubernetes by introducing an abstraction called Tenant. Within each tenant, users are free to create their namespaces and share all the assigned resources.</li><li><a href="https://github.com/operator-framework/operator-lifecycle-manager">operator-lifecycle-manager</a>: A management framework for extending Kubernetes with Operators.</li><li><a href="https://github.com/alexellis/registry-creds">registry-creds</a>: Automate Kubernetes registry credentials, to extend Docker Hub limits.</li></ul><h2 id="Secrets"><a href="#Secrets" class="headerlink" title="Secrets"></a>Secrets</h2><ul><li><a href="https://github.com/kubernetes-sigs/secrets-store-csi-driver">Secrets Store CSI</a>: Secrets Store CSI driver for Kubernetes secrets - Integrates secrets stores with Kubernetes via a CSI volume.</li></ul><h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><ul><li><a href="https://github.com/appvia/krane">krane</a>: It’s a Kubernetes RBAC static analysis tool. It identifies potential security risks in K8s RBAC design and makes suggestions on how to mitigate them. Krane dashboard presents current RBAC security posture and lets you navigate through its definition.</li><li><a href="https://github.com/cyberark/KubiScan">kubiscan</a>: A tool to scan Kubernetes cluster for risky permissions (RBAC).</li><li><a href="https://github.com/deepfence/ThreatMapper">ThreatMapper</a>: It identifies vulnerabilities in running containers, images, hosts and repositories.</li><li><a href="https://github.com/banzaicloud/dast-operator">dast-operator</a>: Dynamic Application and API Security Testing.</li><li><a href="https://github.com/darkbitio/mkit">mkit</a>: MKIT is a Managed Kubernetes Inspection Tool that validates several common security-related configuration settings of managed Kubernetes cluster objects and the workloads/resources running inside the cluster.</li><li><a href="https://github.com/cruise-automation/k-rail">k-rail</a>: Kubernetes security tool for policy enforcement.</li></ul><h2 id="Sign-on"><a href="#Sign-on" class="headerlink" title="Sign-on"></a>Sign-on</h2><ul><li><a href="https://github.com/authelia/authelia">authelia</a>: The Single Sign-On Multi-Factor portal for web apps.</li></ul><h2 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h2><ul><li><a href="https://github.com/configurator/kubefs">kubefs</a>: Mount kubernetes metadata storage as a filesystem.</li><li><a href="https://github.com/opstree/dynamic-pv-scaler">dynamic-pv-scaler</a>: It’s a golang based Kubernetes application which has been created to overcome the scaling issue of Persistent Volume in Kubernetes. This can scale the Persistent Volume on the basis of threshold which you have set.</li></ul><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><ul><li><a href="https://github.com/Stono/kconmon">kconmon</a>: It’s a Kubernetes node connectivity tool that performs frequent tests (tcp, udp and dns), and exposes Prometheus metrics.</li></ul><h2 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h2><ul><li><a href="https://github.com/weibeld/k1s">k1s</a>: It’s the world’s simplest Kubernetes dashboard with only 30 lines of bash code.</li><li><a href="https://github.com/oslabs-beta/Allok8">allok8</a>: It’s a dynamic, conventional, and uncomplicated web-based UI Kubernetes visualization tool.</li></ul><p>I hope you can find something new and interesting in this list to help you to manage in a more efficient way anything related with Kubernetes. If you have any comments or suggestions please leave a comment.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Is 100% availability a myth?</title>
      <link href="/2020/08/31/Is-100-availability-a-myth/"/>
      <url>/2020/08/31/Is-100-availability-a-myth/</url>
      
        <content type="html"><![CDATA[<p>Quick answer: <strong>Yes</strong>, high availability is not about being a hundred percent available. It’s about being close to that. Actually, the word is <strong>high</strong> availability. It’s not total availability or full availability.</p><p>A hundred percent uptime with no failures and with no humans involved is an utopia, and not just that. It’s also a wrong goal because the nature of http prevents you from always being a 100% HA (High availability). The chances that not a single request will ever be lost are impossible for a system with an important number of activity.</p><p>It’s not just a technical or money challenge, it’s a human issue, and as humans we will fail. It involves everything and anything can fail any moment. We can plan and implement very reliable architectures, but get a 100% HA is an infinite resources issue. I think we can understand easily this phenomenon with an exponential function graph like:</p><p><img src="/.dev//2020-08-31-14-40-31.png"></p><p>I’ve put some invented figures which are giving a good idea about what you’ll see in the graph. Basically, a 100% HA will have an infinite cost. It’s the nature of exponential numbers. Even having an infinite budget for implementing this extremely complex architecture, it’s needed also a 100% HA of your internet, electric sources and another invisible system for a common user like <a href="https://blog.cloudflare.com/cloudflare-outage-on-july-17-2020/">Cloudflare</a>, cloud availability zones or regions, etc.</p><p>Seeing the graph, my recommendation is to find the <strong>inflection point</strong> between the costs and availability. We can calculate it with the <strong>second derivative</strong> of the graph.</p><p>Another important question is: Maybe right now is impossible to get 100% HA but what about in the future?. It’s very to predict anything, specially in this industry where the knowledge is changing so fast. The only constant is the change and complexity going up so, in my opinion, it’ll be very difficult for me to see this utopia as a reality, during my lifetime 😬</p><p>This post is based in the last episode of <a href="https://www.devopsparadox.com/episodes/high-availability-does-not-mean-100-availability-70/">DevOps Paradox</a> podcast which I can highly recommend you.</p>]]></content>
      
      
      
        <tags>
            
            <tag> HA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Container Security Fundamentals - Summary</title>
      <link href="/2020/08/17/Container-Security-Fundamentals-Summary/"/>
      <url>/2020/08/17/Container-Security-Fundamentals-Summary/</url>
      
        <content type="html"><![CDATA[<p>Today, Kubecon EU 2020 has started as an online event because of the pandemic so I’m starting a series of posts summarizing the most important topics covered. Hopefully, you found this helpful.</p><p>I’m starting with the presentation called <a href="https://kccnceu20.sched.com/event/ZetO/help-my-cluster-is-on-the-internet-container-security-fundamentals-samuel-davidson-google"> Help! My Cluster Is On The Internet: Container Security Fundamentals</a> by <a href="https://www.linkedin.com/in/samuelbdavidson/">Samuel Davidson</a> from Google. All the credits for him.</p><p>There are 4 areas where we can improve our security related to Kubernetes. These areas are Containers, Pods, Cluster and User.</p><ul><li><p>Containers</p><ul><li>#1 - Assume you will be owned:<ul><li>Always new vulnerabilities will be found. That’s inevitable because of the complexity of every software. So it’s better to be prepared all the time to mitigate this risk working with best security practices.</li></ul></li><li>#2 - Use a distroless base image:<ul><li>Distroless images are bare-bones versions of common base images. They have the bare-minimum needed to execute a binary. So if an attacker gains access, it’s not possible to do a lot of damage.</li><li>When you are interested to reduce size, Alpine should be your choice. For security, the choice should be distroless. Both are very reduced size and implementing security by the concept of <strong>Less attack surface</strong> by avoiding unnecessary stuff on the packaged docker images but distroless has no a package manager at all.</li><li>You can check Google’s GitHub repository of distroless docker images in the following <a href="https://github.com/GoogleContainerTools/distroless">link</a></li></ul></li><li>#3 - Containers should be easy to rebuild and redeploy:<ul><li>It’d be an automated process by a CI/CD pipeline. Having full automation should be the goal. It can work even as a <strong>disaster recovery strategy</strong> because you can rebuild your entire infrastructure from zero quickly.</li></ul></li><li>#4 - Trust your containers with signatures:<ul><li>Your CI/CD platform should sign the containers it builds for production and the image repository is trusted through TLS.</li><li>Think about the possibility that one attacker pushed an infected version of your code in the container registry.</li><li>So, a container with a not valid signature is not accepted in the cluster. It’s not implemented natively by Kubernetes, but it can be done with a <strong>policy engine</strong> like <a href="https://github.com/open-policy-agent/gatekeeper">Gatekeeper</a></li></ul></li></ul></li><li><p>Pods</p><ul><li>#1 - Don’t use hostPath:<ul><li>Avoid using the Node’s filesystem. It can be edited for other pods, apps, etc.</li><li>There are better alternatives like <em>PersistentVolumeClaim</em>.</li></ul></li><li>#2 - Don’t use <em>hostNetwork</em>:<ul><li>Binds the pod to the Node’s network. Allows localhost communication with K8s infrastructure components running on the node.</li></ul></li><li>#3 - Be conscious of your pod’s Service Account:<ul><li><strong>All pods</strong> have a service account by default even if you don’t set one in the <em>podSpec</em>.</li><li>Then, the credentials for your pods service account are automatically mounted within its filesystem and available to the container which can be owned by an attacker !!</li></ul></li><li>#4 Avoid privileged containers in your pods:<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">klaudioz/hello-world</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hello-world</span></span><br><span class="line">    <span class="attr">securityContext:</span></span><br><span class="line">      <span class="attr">privileged:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>This pod is owned by <em>root</em>, so if an attacker owns the pod, it can be very dangerous.</li></ul></li></ul></li><li><p>Cluster</p><ul><li>#1 - Keep your cluster up to date:<ul><li>Bugs and vulnerabilities are fixed all the time, also Kubernetes provides a secure incremental way to update the nodes of the cluster one by one.</li></ul></li><li>#2 - Isolate your cluster from the Internet:<ul><li>Your nodes should not be on the internet with a publicly addressable IP. Use a <em>LoadBalancer</em> for that.</li></ul></li><li>#3 - For your secrets use secrets:<ul><li>Great for access keys, passwords, tokens, etc. Stored in memory, never saved to a node.</li><li>The security of Secrets comes from <em>RBAC</em> and using many namespaces as security boundaries.</li></ul></li><li>#4 Don’t use basic auth:<ul><li>It is a quick convenient way to set up usernames and passwords with your API Server using the flag:    <code>--basic-auth-file=...</code></li><li><strong>NEVER</strong> use it in a production cluster.</li></ul></li></ul></li><li><p>User</p><ul><li>#1 - All your devs and robots (CICD, automation) should have a unique identity:<ul><li>Every person or service account should have a unique identity to interact with the cluster.</li></ul></li><li>#2 - Use <em>RBAC</em> and groups:<ul><li>Implement the <a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege">Principle of Least Privilege</a> in your cluster with RBAC’s fine-grained controls in an easy way.</li></ul></li><li>#3 - Using <em>RBAC</em>, bind policies against groups not individuals:<ul><li>Use <em>Roles</em> and <em>Bindings</em> within the cluster:</li><li><img src="/.dev//2020-08-17-11-07-08.png"></li></ul></li><li>#4 - Use a policy agent to protect your cluster:<ul><li>Typically a Kubernetes <a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/">AdmissionController</a> which selectively allows/denies Kubernetes resource requests based on rules (or policies)</li><li>It can be used <a href="https://github.com/open-policy-agent/gatekeeper">Gatekeeper</a> for this job. It’s very easy to configure and make it works.</li></ul></li></ul></li></ul><p>The author provided a summary document from the talk <a href="https://docs.google.com/document/d/1OefvSpURuOHdNNiwbRXmhPiRUFsYnllgMPDaVqXRkh4/edit#heading=h.lroslfbjn64r">here</a> if you have any question related to the talk.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Kubecon </tag>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
